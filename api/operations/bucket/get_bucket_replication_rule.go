// SPDX-FileCopyrightText: 2025 openstor contributors
// SPDX-FileCopyrightText: 2015-2025 MinIO, Inc.
// SPDX-License-Identifier: AGPL-3.0-or-later

package bucket

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/openstor/console/models"
)

// GetBucketReplicationRuleHandlerFunc turns a function with the right signature into a get bucket replication rule handler
type GetBucketReplicationRuleHandlerFunc func(GetBucketReplicationRuleParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBucketReplicationRuleHandlerFunc) Handle(params GetBucketReplicationRuleParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetBucketReplicationRuleHandler interface for that can handle valid get bucket replication rule params
type GetBucketReplicationRuleHandler interface {
	Handle(GetBucketReplicationRuleParams, *models.Principal) middleware.Responder
}

// NewGetBucketReplicationRule creates a new http.Handler for the get bucket replication rule operation
func NewGetBucketReplicationRule(ctx *middleware.Context, handler GetBucketReplicationRuleHandler) *GetBucketReplicationRule {
	return &GetBucketReplicationRule{Context: ctx, Handler: handler}
}

/*
	GetBucketReplicationRule swagger:route GET /buckets/{bucket_name}/replication/{rule_id} Bucket getBucketReplicationRule

Bucket Replication
*/
type GetBucketReplicationRule struct {
	Context *middleware.Context
	Handler GetBucketReplicationRuleHandler
}

func (o *GetBucketReplicationRule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBucketReplicationRuleParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
