// SPDX-FileCopyrightText: 2025 openstor contributors
// SPDX-FileCopyrightText: 2015-2025 MinIO, Inc.
// SPDX-License-Identifier: AGPL-3.0-or-later

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallHomeSetStatus call home set status
//
// swagger:model callHomeSetStatus
type CallHomeSetStatus struct {

	// diag state
	// Required: true
	DiagState *bool `json:"diagState"`

	// logs state
	// Required: true
	LogsState *bool `json:"logsState"`
}

// Validate validates this call home set status
func (m *CallHomeSetStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiagState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogsState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallHomeSetStatus) validateDiagState(formats strfmt.Registry) error {

	if err := validate.Required("diagState", "body", m.DiagState); err != nil {
		return err
	}

	return nil
}

func (m *CallHomeSetStatus) validateLogsState(formats strfmt.Registry) error {

	if err := validate.Required("logsState", "body", m.LogsState); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this call home set status based on context it is used
func (m *CallHomeSetStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CallHomeSetStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallHomeSetStatus) UnmarshalBinary(b []byte) error {
	var res CallHomeSetStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
