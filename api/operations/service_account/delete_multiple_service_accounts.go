// SPDX-FileCopyrightText: 2025 openstor contributors
// SPDX-FileCopyrightText: 2015-2025 MinIO, Inc.
// SPDX-License-Identifier: AGPL-3.0-or-later

package service_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/openstor/console/models"
)

// DeleteMultipleServiceAccountsHandlerFunc turns a function with the right signature into a delete multiple service accounts handler
type DeleteMultipleServiceAccountsHandlerFunc func(DeleteMultipleServiceAccountsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMultipleServiceAccountsHandlerFunc) Handle(params DeleteMultipleServiceAccountsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteMultipleServiceAccountsHandler interface for that can handle valid delete multiple service accounts params
type DeleteMultipleServiceAccountsHandler interface {
	Handle(DeleteMultipleServiceAccountsParams, *models.Principal) middleware.Responder
}

// NewDeleteMultipleServiceAccounts creates a new http.Handler for the delete multiple service accounts operation
func NewDeleteMultipleServiceAccounts(ctx *middleware.Context, handler DeleteMultipleServiceAccountsHandler) *DeleteMultipleServiceAccounts {
	return &DeleteMultipleServiceAccounts{Context: ctx, Handler: handler}
}

/*
	DeleteMultipleServiceAccounts swagger:route DELETE /service-accounts/delete-multi ServiceAccount deleteMultipleServiceAccounts

Delete Multiple Service Accounts
*/
type DeleteMultipleServiceAccounts struct {
	Context *middleware.Context
	Handler DeleteMultipleServiceAccountsHandler
}

func (o *DeleteMultipleServiceAccounts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteMultipleServiceAccountsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
