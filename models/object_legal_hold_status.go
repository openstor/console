// SPDX-FileCopyrightText: 2025 openstor contributors
// SPDX-FileCopyrightText: 2015-2025 MinIO, Inc.
// SPDX-License-Identifier: AGPL-3.0-or-later

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ObjectLegalHoldStatus object legal hold status
//
// swagger:model objectLegalHoldStatus
type ObjectLegalHoldStatus string

func NewObjectLegalHoldStatus(value ObjectLegalHoldStatus) *ObjectLegalHoldStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ObjectLegalHoldStatus.
func (m ObjectLegalHoldStatus) Pointer() *ObjectLegalHoldStatus {
	return &m
}

const (

	// ObjectLegalHoldStatusEnabled captures enum value "enabled"
	ObjectLegalHoldStatusEnabled ObjectLegalHoldStatus = "enabled"

	// ObjectLegalHoldStatusDisabled captures enum value "disabled"
	ObjectLegalHoldStatusDisabled ObjectLegalHoldStatus = "disabled"
)

// for schema
var objectLegalHoldStatusEnum []interface{}

func init() {
	var res []ObjectLegalHoldStatus
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectLegalHoldStatusEnum = append(objectLegalHoldStatusEnum, v)
	}
}

func (m ObjectLegalHoldStatus) validateObjectLegalHoldStatusEnum(path, location string, value ObjectLegalHoldStatus) error {
	if err := validate.EnumCase(path, location, value, objectLegalHoldStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this object legal hold status
func (m ObjectLegalHoldStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateObjectLegalHoldStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this object legal hold status based on context it is used
func (m ObjectLegalHoldStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
