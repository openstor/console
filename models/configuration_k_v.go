// SPDX-FileCopyrightText: 2025 openstor contributors
// SPDX-FileCopyrightText: 2015-2025 MinIO, Inc.
// SPDX-License-Identifier: AGPL-3.0-or-later

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigurationKV configuration k v
//
// swagger:model configurationKV
type ConfigurationKV struct {

	// env override
	EnvOverride *EnvOverride `json:"env_override,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this configuration k v
func (m *ConfigurationKV) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvOverride(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationKV) validateEnvOverride(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvOverride) { // not required
		return nil
	}

	if m.EnvOverride != nil {
		if err := m.EnvOverride.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("env_override")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("env_override")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this configuration k v based on the context it is used
func (m *ConfigurationKV) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvOverride(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationKV) contextValidateEnvOverride(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvOverride != nil {

		if swag.IsZero(m.EnvOverride) { // not required
			return nil
		}

		if err := m.EnvOverride.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("env_override")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("env_override")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationKV) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationKV) UnmarshalBinary(b []byte) error {
	var res ConfigurationKV
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
